version: "3.9"

####################
# REDES Y VOLÃšMENES
####################
networks:
  red_gvm:

volumes:
  # Greenbone
  vol_gpg: {}
  vol_scap: {}
  vol_certificados: {}
  vol_objetos_datos: {}
  vol_gvmd_datos: {}
  vol_psql_datos: {}
  vol_vt: {}
  vol_notus: {}
  vol_psql_socket: {}
  vol_gvmd_socket: {}
  vol_ospd_socket: {}
  vol_redis_socket: {}
  vol_openvas_cfg: {}
  vol_openvas_logs: {}
  # DefectDojo
  vol_dd_postgres: {}
  vol_dd_media: {}
  vol_dd_redis: {}

####################
# SERVICIOS
####################
services:
  ############
  # GREENBONE
  ############
  pruebas_vulnerabilidad:
    image: registry.community.greenbone.net/community/vulnerability-tests
    environment:
      FEED_RELEASE: "${ALIMENTACION_GVM}"
    volumes:
      - vol_vt:/mnt
    networks: [red_gvm]

  datos_notus:
    image: registry.community.greenbone.net/community/notus-data
    volumes:
      - vol_notus:/mnt
    networks: [red_gvm]

  datos_scap:
    image: registry.community.greenbone.net/community/scap-data
    volumes:
      - vol_scap:/mnt
    networks: [red_gvm]

  datos_cert_bund:
    image: registry.community.greenbone.net/community/cert-bund-data
    volumes:
      - vol_certificados:/mnt
    networks: [red_gvm]

  datos_dfn_cert:
    image: registry.community.greenbone.net/community/dfn-cert-data
    volumes:
      - vol_certificados:/mnt
    depends_on:
      datos_cert_bund:
        condition: service_completed_successfully
    networks: [red_gvm]

  objetos_datos:
    image: registry.community.greenbone.net/community/data-objects
    environment:
      FEED_RELEASE: "${ALIMENTACION_GVM}"
    volumes:
      - vol_objetos_datos:/mnt
    networks: [red_gvm]

  formatos_informe:
    image: registry.community.greenbone.net/community/report-formats
    environment:
      FEED_RELEASE: "${ALIMENTACION_GVM}"
    volumes:
      - vol_objetos_datos:/mnt
    depends_on:
      objetos_datos:
        condition: service_completed_successfully
    networks: [red_gvm]

  datos_gpg:
    image: registry.community.greenbone.net/community/gpg-data
    volumes:
      - vol_gpg:/mnt
    networks: [red_gvm]

  redis_servidor:
    image: registry.community.greenbone.net/community/redis-server
    restart: on-failure
    volumes:
      - vol_redis_socket:/run/redis/
    networks: [red_gvm]

  pg_gvm:
    image: registry.community.greenbone.net/community/pg-gvm:stable
    restart: on-failure
    volumes:
      - vol_psql_datos:/var/lib/postgresql
      - vol_psql_socket:/var/run/postgresql
    networks: [red_gvm]

  gvmd:
    image: registry.community.greenbone.net/community/gvmd:stable
    restart: on-failure
    volumes:
      - vol_gvmd_datos:/var/lib/gvm
      - vol_scap:/var/lib/gvm/scap-data/
      - vol_certificados:/var/lib/gvm/cert-data
      - vol_objetos_datos:/var/lib/gvm/data-objects/gvmd
      - vol_vt:/var/lib/openvas/plugins
      - vol_psql_datos:/var/lib/postgresql
      - vol_gvmd_socket:/run/gvmd
      - vol_ospd_socket:/run/ospd
      - vol_psql_socket:/var/run/postgresql
    depends_on:
      pg_gvm:
        condition: service_started
      datos_scap:
        condition: service_completed_successfully
      datos_cert_bund:
        condition: service_completed_successfully
      datos_dfn_cert:
        condition: service_completed_successfully
      objetos_datos:
        condition: service_completed_successfully
      formatos_informe:
        condition: service_completed_successfully
    networks: [red_gvm]

  gsa:
    image: registry.community.greenbone.net/community/gsa:stable
    restart: on-failure
    ports:
      - "${IP_GSA}:9392:80"
    volumes:
      - vol_gvmd_socket:/run/gvmd
    depends_on: [gvmd]
    networks: [red_gvm]

  configurar_openvas:
    image: registry.community.greenbone.net/community/openvas-scanner:stable
    volumes:
      - vol_openvas_cfg:/mnt
      - vol_openvas_logs:/var/log/openvas
    command: |
      /bin/sh -c 'printf "table_driven_lsc = yes\nopenvasd_server = http://openvasd:80\n" > /mnt/openvas.conf && \
      sed "s/127/128/" /etc/openvas/openvas_log.conf | sed "s/gvm/openvas/" > /mnt/openvas_log.conf && \
      chmod 644 /mnt/openvas.conf /mnt/openvas_log.conf && \
      touch /var/log/openvas/openvas.log && chmod 666 /var/log/openvas/openvas.log'
    networks: [red_gvm]

  openvas_logs:
    image: registry.community.greenbone.net/community/openvas-scanner:stable
    restart: on-failure
    volumes:
      - vol_openvas_cfg:/etc/openvas
      - vol_openvas_logs:/var/log/openvas
    command: |
      /bin/sh -c 'cat /etc/openvas/openvas.conf && tail -f /var/log/openvas/openvas.log'
    depends_on:
      configurar_openvas:
        condition: service_completed_successfully
    networks: [red_gvm]

  openvasd:
    image: registry.community.greenbone.net/community/openvas-scanner:stable
    restart: on-failure
    environment:
      OPENVASD_MODE: service_notus
      GNUPGHOME: /etc/openvas/gnupg
      LISTENING: 0.0.0.0:80
    volumes:
      - vol_openvas_cfg:/etc/openvas
      - vol_openvas_logs:/var/log/openvas
      - vol_gpg:/etc/openvas/gnupg
      - vol_notus:/var/lib/notus
    depends_on:
      pruebas_vulnerabilidad:
        condition: service_completed_successfully
      configurar_openvas:
        condition: service_completed_successfully
      datos_gpg:
        condition: service_completed_successfully
    networks:
      red_gvm:
        aliases: [openvasd]

  ospd_openvas:
    image: registry.community.greenbone.net/community/ospd-openvas:stable
    restart: on-failure
    hostname: ospd-openvas.local
    cap_add: [NET_ADMIN, NET_RAW]
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined
    command:
      ["ospd-openvas","-f","--config","/etc/gvm/ospd-openvas.conf","--notus-feed-dir","/var/lib/notus/advisories","-m","666"]
    volumes:
      - vol_gpg:/etc/openvas/gnupg
      - vol_vt:/var/lib/openvas/plugins
      - vol_notus:/var/lib/notus
      - vol_ospd_socket:/run/ospd
      - vol_redis_socket:/run/redis/
      - vol_openvas_cfg:/etc/openvas/
      - vol_openvas_logs:/var/log/openvas
    depends_on:
      redis_servidor:
        condition: service_started
      datos_gpg:
        condition: service_completed_successfully
      pruebas_vulnerabilidad:
        condition: service_completed_successfully
      configurar_openvas:
        condition: service_completed_successfully
    networks: [red_gvm]

  herramientas_gvm:
    image: registry.community.greenbone.net/community/gvm-tools
    volumes:
      - vol_gvmd_socket:/run/gvmd
      - vol_ospd_socket:/run/ospd
    depends_on: [gvmd, ospd_openvas]
    networks: [red_gvm]

  #############
  # DEFECTDOJO
  #############
  nginx:
    build:
      context: ./
      dockerfile: "Dockerfile.nginx-${SO_DEFECTDOJO}"
    image: defectdojo/defectdojo-nginx:${VERSION_NGINX}
    depends_on: [uwsgi]
    environment:
      NGINX_METRICS_ENABLED: "${NGINX_METRICAS}"
      DD_UWSGI_HOST: uwsgi
      DD_UWSGI_PORT: 3031
    volumes:
      - vol_dd_media:/usr/share/nginx/html/media
    ports:
      - target: 8080
        published: ${PUERTO_DD}
        mode: host
      - target: 8443
        published: ${PUERTO_DD_TLS}
        mode: host
    networks: [red_gvm]

  uwsgi:
    build:
      context: ./
      dockerfile: "Dockerfile.django-${SO_DEFECTDOJO}"
      target: django
    image: defectdojo/defectdojo-django:${VERSION_DD}
    depends_on: [postgres]
    entrypoint:
      ["/wait-for-it.sh","postgres:${PUERTO_BD}", "-t","30","--","/entrypoint-uwsgi.sh"]
    environment:
      DD_DEBUG: "False"
      DD_DJANGO_METRICS_ENABLED: "${DD_DJANGO_METRICAS}"
      DD_ALLOWED_HOSTS: "${DD_HOSTS_PERMITIDOS}"
      DD_DATABASE_URL: ${URL_BD_DD}
      DD_CELERY_BROKER_URL: ${URL_CELERY}
      DD_SECRET_KEY: ${CLAVE_SECRETA_DD}
      DD_CREDENTIAL_AES_256_KEY: ${CLAVE_AES256_DD}
      DD_DATABASE_READINESS_TIMEOUT: "${TIEMPO_ESPERA_BD}"
    volumes:
      - ./docker/extra_settings:/app/docker/extra_settings
      - vol_dd_media:${RUTA_MEDIA_DD}
    networks: [red_gvm]

  celerybeat:
    image: defectdojo/defectdojo-django:${VERSION_DD}
    depends_on: [postgres, redis]
    entrypoint:
      ["/wait-for-it.sh","postgres:${PUERTO_BD}", "-t","30","--","/entrypoint-celery-beat.sh"]
    environment:
      DD_DATABASE_URL: ${URL_BD_DD}
      DD_CELERY_BROKER_URL: ${URL_CELERY}
      DD_SECRET_KEY: ${CLAVE_SECRETA_DD}
      DD_CREDENTIAL_AES_256_KEY: ${CLAVE_AES256_DD}
      DD_DATABASE_READINESS_TIMEOUT: "${TIEMPO_ESPERA_BD}"
    volumes:
      - ./docker/extra_settings:/app/docker/extra_settings
    networks: [red_gvm]

  celeryworker:
    image: defectdojo/defectdojo-django:${VERSION_DD}
    depends_on: [postgres, redis]
    entrypoint:
      ["/wait-for-it.sh","postgres:${PUERTO_BD}", "-t","30","--","/entrypoint-celery-worker.sh"]
    environment:
      DD_DATABASE_URL: ${URL_BD_DD}
      DD_CELERY_BROKER_URL: ${URL_CELERY}
      DD_SECRET_KEY: ${CLAVE_SECRETA_DD}
      DD_CREDENTIAL_AES_256_KEY: ${CLAVE_AES256_DD}
      DD_DATABASE_READINESS_TIMEOUT: "${TIEMPO_ESPERA_BD}"
    volumes:
      - ./docker/extra_settings:/app/docker/extra_settings
      - vol_dd_media:${RUTA_MEDIA_DD}
    networks: [red_gvm]

  inicializador:
    image: defectdojo/defectdojo-django:${VERSION_DD}
    depends_on: [postgres]
    entrypoint:
      ["/wait-for-it.sh","postgres:${PUERTO_BD}","--","/entrypoint-initializer.sh"]
    environment:
      DD_DATABASE_URL: ${URL_BD_DD}
      DD_ADMIN_USER: ${USUARIO_ADMIN_DD}
      DD_ADMIN_MAIL: ${CORREO_ADMIN_DD}
      DD_ADMIN_FIRST_NAME: ${NOMBRE_ADMIN_DD}
      DD_ADMIN_LAST_NAME: ${APELLIDO_ADMIN_DD}
      DD_INITIALIZE: "true"
      DD_SECRET_KEY: ${CLAVE_SECRETA_DD}
      DD_CREDENTIAL_AES_256_KEY: ${CLAVE_AES256_DD}
      DD_DATABASE_READINESS_TIMEOUT: "${TIEMPO_ESPERA_BD}"
    volumes:
      - ./docker/extra_settings:/app/docker/extra_settings
    networks: [red_gvm]

  postgres:
    image: postgres:17.4-alpine
    environment:
      POSTGRES_DB: ${NOMBRE_BD}
      POSTGRES_USER: ${USUARIO_BD}
      POSTGRES_PASSWORD: ${CONTRASENA_BD}
    volumes:
      - vol_dd_postgres:/var/lib/postgresql/data
    networks: [red_gvm]

  redis:
    image: redis:7.2.8-alpine
    volumes:
      - vol_dd_redis:/data
    networks: [red_gvm]
